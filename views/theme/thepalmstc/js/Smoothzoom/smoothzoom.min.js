/*
 * Smoothzoom V 1.1.0
 * http://github.com/kthornbloom/smoothzoom
 *
 * Copyright 2015, Kevin Thornbloom
 * Free to use in personal and commercial projects.
 * Do not resell as a plugin
 * http://www.opensource.org/licenses/mit-license.php
 */

(function($) {
  $.fn.extend({
    smoothZoom: function(opt) {
      var defaults = {
        zoominSpeed: 300,
        zoomoutSpeed: 400,
        zoominEasing: 'linear',
        zoomoutEasing: 'linear',
        navigationButtons: 'true',
        navigationLeft: '&#9664;',
        navigationRight: '&#9654;',
        navigationClose: '&#10006;',
        closeButton: 'true',
        showCaption: 'true',
        youtubeOptions: 'rel=0&autoplay=1',
        debug: false
      };
      var options = $.extend(defaults, opt);
      var $self = $(this);
      // CLICKING AN IMAGE
      $self.closest('a[data-smoothzoom]').click(function(event) {

        var offset = $('img', this).offset(),
          amountScrolled = $(window).scrollTop();

        $('img', this).attr('id', 'lightzoomed');
        $('body').append("<div class='sz-overlay' style='z-index: 990;'></div><a href='#' class='sz-zoomed' style='z-index: 991;' ></a>");

        // Add Nav buttons if needed, and if option is set
        var groupName = $('#lightzoomed').parents('a').data('smoothzoom'),
          groupTotal = $('a[data-smoothzoom=' + groupName + ']').length;
        if (options.navigationButtons == 'true' && groupTotal > 1) {
          $('body').append("<a href='#' class='sz-left' style='z-index: 991;'>" + options.navigationLeft + "</a><a href='#' class='sz-right' style='z-index: 991;'>" + options.navigationRight + "</a>");
        }

        // Add Close button if option is set
        if (options.closeButton == 'true') {
          $('body').append("<a href='#' class='sz-close' style='z-index: 991;'>" + options.navigationClose + "</a>");
        }

        // Add Caption div if option is set
        if (options.showCaption == 'true') {
          $('body').append("<div class='sz-caption'></div>");
          caption();
        }

        $('.sz-zoomed').css({
          width: $('img', this).width(),
          height: $('img', this).height(),
          top: (offset.top - amountScrolled),
          left: offset.left
        });
        //this appends the img or iframe to sz-zoomed
        getSourceCode($(this));
        _debug('Click Event', options);
        event.preventDefault();
      });

      // Close Everything On Click
      $(document.body).on("click", ".sz-zoomed,.sz-close", function(event) {
        closeAll();
        event.stopPropagation();
        return false;
      });

      // Next Button
      $(document.body).on("click", " .sz-right", function(event) {
        nextGroup(1);
        event.preventDefault();
      });

      // Prev Button
      $(document.body).on("click", ".sz-left", function(event) {
        nextGroup(-1);
        event.preventDefault();
      });
      _debug('Init for image', $self);
      // Update Caption
      function caption() {
        if (options.showCaption == 'true') {
          $('.sz-caption').fadeOut();
          var currentCap = $('#lightzoomed').attr('alt');
          if (currentCap) {
            $(".sz-caption").html("<span>" + currentCap + "</span>").fadeIn();
          } else {
            $(".sz-caption").empty();
          }
        }
      }
      // Checks if it is a youtube
      function getYoutubeId(str) {
        var match;
        match = str.match(/^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/);
        if (match && match[2].length === 11) {
          return match[2];
        } else {
          return false;
        }
      }

      // Close Function
      function closeAll() {
        var offset = $("#lightzoomed").offset(),
          originalWidth = $("#lightzoomed").width(),
          originalHeight = $("#lightzoomed").height(),
          amountScrolled = $(window).scrollTop();
        $('.sz-overlay, .sz-left, .sz-right').fadeOut();
        
        $('.sz-zoomed').stop(true, true).animate({
          width: originalWidth,
          height: originalHeight,
          top: (offset.top - amountScrolled),
          left: offset.left
        }, options.zoomoutSpeed, options.zoomoutEasing, function() {
          $('.sz-zoomed, .sz-overlay, .sz-right, .sz-left, .sz-caption, .sz-close').remove();
          $('#lightzoomed').removeAttr('id');
        });
        $('.sz-zoomed').data('firstime', true);
      }
      // Changes to Next Group either -1 backgwards or +1 forwards
      function nextGroup(moveValue) {
        var groupName = $('#lightzoomed').parents('a').data('smoothzoom'),
          currentIndex = $('#lightzoomed').parents('a').index("[data-smoothzoom=" + groupName + "]"),
          groupTotal = $('a[data-smoothzoom=' + groupName + ']').length;

        // error checking moveValue
        moveValue = moveValue === undefined ? 0 : moveValue;
        moveValue = Math.min(parseInt(moveValue), 1);
        var nextIndex = currentIndex + moveValue;
        if (nextIndex >= groupTotal) {
          nextIndex = 0;
        }
        if (nextIndex <= -1) {
          nextIndex = groupTotal - 1;
        }
        // fade out and remove current image
        $("#lightzoomed").removeAttr('id');

        $('.sz-zoomed').stop(true, true).animate({
          'opacity': '0'
        }, 200, function() {
          $("[data-smoothzoom=" + groupName + "]:eq(" + nextIndex + ")").find('img').attr('id', 'lightzoomed');
          $(this).html(getSourceCode($("#lightzoomed").parent()));
          caption();
        });
      }
      /** Gets Iframe or image and adds Animation  **/
      function getSourceCode($obj) {
        var source = $obj.attr('href');
        var modalW = ($obj.attr('data-width') === undefined) ? 1280 : Math.max($obj.attr('data-width'), 560);
        var modalH = ($obj.attr('data-height') === undefined) ? 720 : Math.max($obj.attr('data-height'), 315);

        _debug('Source', source, 'wr', $obj.attr('data-width'), 'w', modalW, 'hr', $obj.attr('data-height'), 'h', modalH);
        $('.sz-zoomed').data('firstime', false);
        var isImage = source.match(/(^data:image\/.*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg)((\?|#).*)?$)/i),
          overlay = "";
        // is an image
        if (isImage) {
          _debug('Source is Image');
          overlay += '<img style=" width: inherit; height: auto; opacity:0;" src="' + source + '" />';
          $('.sz-zoomed').html(overlay);
          $('<img/>').attr('src', source).load(function() {
            // after image is loaded do animation
            $('.sz-zoomed img').animate({
              opacity: '0.95'
            });
            $('.sz-zoomed').stop(true, true).animate(getCssObject(this.width, this.height), options.zoominSpeed, options.zoominEasing, function() {
              $('.sz-overlay, .sz-left, .sz-right, .sz-close').fadeIn(500, function() {
                $('.sz-zoomed img').animate({
                  opacity: '1'
                });
              });
            });
          });
        }
        // not an image
        else {
          // means it is a youtube video
          if (getYoutubeId(source) !== false) {

            _debug('Source is Youtube');
            overlay += ' <div class="embed-responsive embed-responsive-16by9" >';
            overlay += '<iframe   class="embed-responsive-item" ';
            overlay += 'src="https://www.youtube.com/embed/' + getYoutubeId(source) + '?' + options.youtubeOptions + '"';
            overlay += 'frameborder="0" allowfullscreen></iframe>';
            overlay += '</div>';
            $('.sz-zoomed').html(overlay);
            $('.sz-zoomed').stop(true, true).animate(getCssObject(modalW, modalH), options.zoominSpeed, options.zoominEasing, function() {
              $('.sz-overlay, .sz-left, .sz-right, .sz-close').fadeIn();
            });

          }
          //means it is something else, probably an ajax call
          else {
            _debug('Source is remote');

            $.ajax({
              url: source,
              dataType: 'html',
              success: function(data) {
                $('.sz-zoomed').html(data);
                $('.sz-zoomed').stop(true, true).animate(getCssObject(modalW, modalH), options.zoominSpeed, options.zoominEasing, function() {
                  $('.sz-overlay, .sz-left, .sz-right, .sz-close').fadeIn(500, function() {
                    $('.sz-zoomed *').animate({
                      opacity: '1'
                    });
                  });

                });
              }
            });
          }

        }
      }

      /* This gets Css Object for animation handles resize to fit screen */
      function getCssObject(width, height) {
        var captionHeight = $('.sz-caption').outerHeight();
        var centerVert = ($(window).outerHeight() - captionHeight) / 2;
        var centerHorz = $(window).outerWidth() / 2;

        var factor = ($(window).outerWidth()) / width;
        var nWidth = width;
        var nHeight = height;
        // height is bigger
        if (height > (($(window).outerHeight() * 0.9) - captionHeight)) {
          factor = (($(window).outerHeight() * 0.9) - captionHeight) / height;
          nWidth = width * factor;
          nHeight = height * factor;

        }
        if (nWidth > $(window).outerWidth()) {
          nHeight = nHeight * factor;
        }
        nWidth = Math.min($(window).outerWidth(), nWidth);

        nHeight = Math.min($(window).outerHeight(), nHeight);

        var objTop = (centerVert - (nHeight / 2)) + 'px';
        var objLeft = (centerHorz - (nWidth / 2)) + 'px';

        var cssObject = {
          opacity: '1',
          top: objTop,
          left: objLeft,
          width: nWidth + 'px',
          height: nHeight + 'px',
        };
        _debug(cssObject);
        return cssObject;
      }

      function _debug() {
        if (options.debug) {
          console.log(arguments);
        }
      }

      // Keyboard shortcuts
      $(document).keydown(function(e) {
        _debug('keydown', e);
        switch (e.which) {
          case 37: // Left arrow
            if ($('.sz-overlay').length) {
              nextGroup(-1);
            }
            break;

          case 39: // Right arrow
            if ($('.sz-overlay').length) {
              nextGroup(1);
            }
            break;

          case 27: // Escape key
            closeAll();
            break;

          case 40: // Down arrow
            closeAll();
            break;

          default:
            return; // exit this handler for other keys
        }
        e.preventDefault();
      });

    }
  });
})(jQuery);
